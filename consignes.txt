/Changez votre identifiant git pour Victo-[votreDA]
/Important de se conformer aux standards

Vous devez utiliser git. 1 commit / push par exercice QUI FONCTIONNE
Commentaire requis lors du push



Majuscule minuscule
Les exercices suivants se veulent une révision et une progression
Les méthode sont généralement static pour les premières dizaines d'exercices
Une signature est un mot qui désigne le type de retour, le nom de la méthode et les types des paramètres qui lui sont passés
Exemple : la ligne suivante : int a = Calculer(2,3)
	La signature de la méthode Calculer est "int Calculer(int,int)"
	La méthode retourne un int, elle s'appelle Calculer et elle reçoit 2 int en paramètre.

Le noms des variable, c'est à vous de les définir.

Visibilités
Pour l'instant toute les méthode et les attributs se veulent publique.

Correction P1
En P1 vous avez utiliser des minuscule pour le nom des méthodes.
Fred vous a habitué pour éviter la confusion entre le nom des classes, et les méthodes.
En C# le standard est que les Classes et les Méthodes ont des noms commençant par une lettre Majuscule
Exemple 
	Console.WriteLine
	Random rnd = new Random();
	rnd.Next();

WriteLine, Next ont des majuscules.

Documentation, vous devez utiliser // pour les commentaires simples
vous devez utiliser /* et */ pour ouvrir et fermer un commentaire de plusieurs lignes

Vous devez faire des summarys en haut de chaque, classe, constructeur et méthode
vous tapez votre entête de méthode avec les bon noms de paramêtres type de retour.
Ensuite en haut de la méthode tapez "///"

Exemple 

    /// <summary>
    /// Cette classe contient des exemples de documentation.
    /// </summary>
    public class ExempleDocumentation
    {
        /// <summary>
        /// Additionne deux nombres entiers.
        /// </summary>
        /// <param name="a">Le premier nombre à additionner.</param>
        /// <param name="b">Le deuxième nombre à additionner.</param>
        /// <returns>La somme des deux nombres.</returns>
        /// <exception cref="ArgumentException">Le résultat de l'addition dépasse la capacité d'un entier.</exception>
        public int Additionner(int a, int b)
        {
            // Vérifier si le résultat de l'addition dépasse la capacité d'un entier.
            if ((a > 0 && b > int.MaxValue - a) || (a < 0 && b < int.MinValue - a))
            {
                throw new ArgumentException("Le résultat de l'addition dépasse la capacité d'un entier.");
            }

            // Effectuer l'addition et retourner le résultat.
            return a + b;
        }
    }

Les summary servent à documenter le code, à savoir à quoi sert le bloc de code
Il permet de savoir ce qui est valide comme paramètre (exemple random.Next(2,5), est-ce que le 5 est inclusif ou exclusif)
Il permet de bien faire les tests, si le summary dit que c'est entre 0 et 10 inclusif. Alors les tests doivent se faire
en fonction que les paramètres sont entre 0 et 10 inclusif.

Les summarys sont maintenant essentiel et obligatoire pour Programmation 2

Semaine 1-2 :
	Exercices
	Faites une classe "RevisionP1" avec une méthode au niveau static
	pour chacun des exercices suivants:
	Exercice 1
		Faites la méthode avec la signature suivante :
			void Exercice1()
			La méthode doit :
				Afficher "Allô p2";
	Exercice 2
		Faites la méthode avec la signature suivante :
			void Exercice2(int,int)
			La méthode doit :
				Afficher 
				"premier entier : [le nombre 1]"
				"deuxième entier : [le nombre 2]"
	Exercice 3
		Faites la méthode avec la signature suivante :
			int Exercice3(int,int)
				La méthode doit :
					Prendre les deux nombres
					Les additionner
				La méthode retourne
					Le résultat du premier nombre et du deuxième
					* Aucun affichage dans la méthode
	Exercice 4
		Faites la méthode avec la signature suivante :
			int Exercice4()
				La méthode doit :
					Demander à l'utilisateur un nombre
				La méthode retourne:
					Le nombre
					*On assume que l'utilisateur n'entre pas autre chose qu'un nombre
	Exercice 5
		Faites la méthode avec la signature suivante :
			int Exercice5()
				La méthode doit :
					Demander à l'utilisateur un nombre
					Valide que c'est un nombre supérieur à 0
				La méthode retourne:
					-1 si le nombre n'est pas un nombre OU 
					que le nombre est inférieur à 0 OU
					que l'utilisateur n'a fait que "entrer sans rien entrer"
					
	Exercice 6
		Faites la méthode avec la signature suivante :
			int Exercice6()
				La méthode doit :
					Demander à l'utilisateur un nombre tant que le nombre n'est pas un nombre supérieur à 10
				La méthode retourne :
					Le nombre valide.
	
	Exercice 7
		Faites la méthode avec la signature suivante :
			int Exercice7(int,int)
				La méthode doit :
					Faire la division du premier par le deuxième nombre
				La méthode retourne
					0 si la division est par 0
					Le résultat de la division
	
	Exercice8
		Faites la méthode avec la signature suivante:
			int[] Exercice8(int)
				La méthode doit :
					Générer un tableau d'une longueur passée en paramètre initialisé à 0
				La méthode retourne :
					Le tableau généré à 0 de la longueur passée en paramètre
	Exercice 9
		Faites la méthode avec la signature suivante:
			int[] Exercice9(int,int,int)
				La méthode doit :
					Génénérer un tableau de longueur égale au premier entier
					Le tableau doit être rempli d'un ensemble de données aélatoire entre la valeur du deuxième parametre et du troisième paramètre
					Les données PEUVENT CONTENIR le troisième paramètres.
	Exercice 10
		Faites la méthode avec la signature suivante:
			int[] Exercice10(int,int,int)
				La méthode doit :
					Génénérer un tableau de longueur égale au premier entier
					Le tableau doit être rempli d'un ensemble de données aélatoire entre la valeur du deuxième parametre et du troisième paramètre
				On assume que :
				Les données PEUVENT CONTENIR le troisième paramètres.
				Le deuxième paramètre est assumé comme étant inférieur ou égal au troisième.

	Exercice 11
		Faites la méthode avec la signature suivante:
			int[] Exercice10(int,int,int)
				La méthode doit :
					Génénérer un tableau de longueur égale au premier entier
					Le tableau doit être rempli d'un ensemble de données aléatoire entre la valeur du deuxième parametre et du troisième paramètre
					Les données PEUVENT CONTENIR le troisième paramètres.
				On assume que :
					Le deuxième paramètre peut être négatif
					Le deuxième paramètre est assumé comme étant inférieur ou égal au troisième.

	Exercice 12
		Faites la méthode avec la signature suivante:
			int[] Exercice12(int,int,int)
				La méthode doit :
					Génénérer un tableau de longueur égale au premier entier
					Le tableau doit être rempli d'un ensemble de données aléatoire entre la valeur du deuxième parametre et du troisième paramètre
					Les données PEUVENT CONTENIR le troisième paramètre.
				On assume que :
					Le deuxième paramètre peut être négatif
					Le deuxième paramètre peut, ou non, être inférieur ou égal au troisième.
	
	Exercice 13
		Faites la méthode Exercice11 avec la signature suivante :
			int Exercice13(int[])
				La méthode doit:
					Retourner la somme de tous les nombres dans le tableau de int
					Utiliser la boucle for
					
	Exercice 14
		Faites la méthode Exercice14 avec la signature suivante :
			int Exercice14(int[])
				La méthode doit:
					Retourner la somme de tous les nombres dans le tableau de int
					Utiliser la boucle for
					
	Exercice 15
		Faites la méthode Exercice15 avec la signature suivante :
			int Exercice15(int[])
				La méthode doit:
					Retourner la somme de tous les nombres dans le tableau de int
					Utiliser la boucle for
					
	Exercice 16
		Faites la méthode Exercice16 avec la signature suivante :
			void Exercice16()
				La méthode doit:
					Afficher la forme suivante:
						***
						***
						***

	Exercice 17
		Faites la méthode Exercice17 avec la signature suivante :
			void Exercice17(int)
				La méthode doit:
					Afficher une forme similaire à la forme de l'exercice16
					à la différence que la forme à une longueur/largeur defini par le paramètre
					Exercice17(4);
						****
						****
						****
					La méthode doit utiliser deux boucle for.
					On assume que:
						Le paramètre est toujours supérieur à 0;
	
	Exercice18
		Faites la méthode Exercice18 avec la signature suivante
			void Exercice18(int)
				La méthode doit:
					Afficher une forme similaire à la forme de l'exercice 17
					à la différence que la première boucle est un for et la seconde est un while.
				On assume que :
					Le paramètre peut être négatif ou positif, on prend la valeur absolue si la valeur est négative

	Exercice 19
		Faites la méthode Exercice19 avec la signature suivante
			void Exerice19(int,int)
				La méthode doit:
					Afficher une forme de largeur égale au premier paramètre
					De hauteur du second paramètre
					Exercice19(5,3)
					*****
					*****
					*****
				On assume que
					Les nombres sont invalide si inférieur à 1
					La méthode affiche "impossible d'afficher parce que [mettre un message pertinent]"
				
	Exercice 20
		Faites la méthode Exercice20 avec la signature suivante:
			void Exercice20(int, int, char)
				La méthode doit:
					Afficher une forme similaire à l'exercice 19
					Le paramètre char est le caractère à afficher.
				On assume que :
					Les nombres sont invalides si inférieur à 1
					La méthode affiche "impossible d'afficher parce que [mettre un message pertinent]"
	Exercice 21
		Faites la méthode Exercice21 avec la signature suivante
			void Exercice21(int,int,int,char)
				La méthode doit:
					Afficher une forme similaire à l'exercice 20
					Le parametre 1 est la largeur
					Le paramètre 2 est la hauteur
					Le paramètre 3 est le nombre de fois que la forme doit être affichée
					Le paramètre 4 est le caractère à utiliser
				On assume que :
					Les nombres sont invalides si inférieurs à 1
					Il y a un une ligne vide entre chacune des formes
	
	Exercice 22
		Faites la méthode Exercice22 avec la signature suivante
			void Exercice22(int)
				La méthode doit :
					Afficher une forme similaire à celle-ci dont la ligne la plus longue est égale au paramètre
					*
					**
					***
					****
				On assume que :
					La méthode utilise 2 boucles for.
					Le paramètre est valide.

À partir de maintenant vous devez valider que les paramètres sont valides
Un message d'erreur doit être mis dans la console avec Debug.WriteLine("le message d'erreur","le nom de l'exercice");
	
	Exercice 23
		Faites la méthode Exercice23 avec la signature suivante
			void Exercice23(int)
				La méthode doit :
					Afficher une forme similaire à celle-ci dont la ligne la plus longue est égale au paramètre
					****
					***
					**
					*
				On assume que :
					La méthode utilise 2 boucles while.
					
	Exercice 24
		Faites la méthode Exercice24 avec la signature suivante
			void Exercice24(int)
				La méthode doit :
					Afficher une forme similaire à celle-ci dont la ligne la plus longue est égale au paramètre
					****
					***
					**
					*
				On assume que :
					La méthode utilise 2 boucles do while.
	
	Exercice 25
		Faites la méthode Exercice25 avec la signature suivante
			void Exercice25(int)
				La méthode doit :
					Afficher une forme similaire à celle-ci dont la ligne la plus longue est égale au paramètre
					****
					***
					**
					*
					**
					***
					****
				On assume que :
					La méthode utilise des méthodes existantes.
					
		Exercice 26
		Faites la méthode Exercices26 avec la signature suivante
			string Exercice26(int)
				La méthode doit:
					retourner une chaine de caractères représentant une forme similaire à celle-ci dont la ligne la plus longue est de longueur du paramètre
					    *
					   * *
					  * * *
					 * * * *
					* * * * *
					On assume que
					La méthode utilise des boucles for
					Q'il n'y a pas d'espace inutile avant OU après les *
		
		Exercice 27
		Faites la méthode Exercice26 avec la signature suivante
			double Exercice27(int[])
				La méthode doit:
					Faire la moyenne des nombres dans le tableau
					
				On assume que :
					Le tableau peut-être null ou non null
					Être de longueur >= à 0;
					
	Exercice28
		Faites la méthode Exercice28 avec la signature suivante:
			double Exercice28(int[])
				La méthode doit:
					Calculer la moyenne
					reprendre chacun des nombres du tableau en paramètre et pour chacun des nombres:
						Calculer la différence à la moyenne
						Si la différence est négative, la rendre positive
						Faire la moyenne de ces différences.
						
		Tableau d'origine : 1 2 3 -5 8 3
		La moyenne est de 2
		Pour chacun des nombres, la différence à la moyenne est de
			1|(1-2)| 0(2-2) 1(3-2) 7 |(-5-2)| 6|(2-8)| et 1|(2-3)|
			La moyenne des écarts à la moyenne est de 2.666...
	
	Exercice29
		Faites la méthode Exercice29 avec la signature suivante:
			int Exercice29(int[], int, int)
				La méthode doit:
					regarder dans le tableau à l'index paramètre 1 et paramètre 2
					retourner l'index du plus grand des 2 nombres dans le tableau
			
		Exercice30
		Faites la méthode Exercice30 avec la signature suivante
			void Exercice30(int[], int, int)
				La méthode doit:
					Échanger la position des nombres aux index paramètre 2 et parametre 3
					{5, 10, 15, 20, 25, 30} avec les parametre 0 et 3 vont renvoyer
					 0   1   3   2   3   4
					{25, 10, 15, 20, 5, 30}
				On assume que :
					*rappel : À partir de l'exercice 23 vous devez validez vos paramètres
		
	Exercice31
		Faites la méthode avec la signature suivante :
			int Exercice31(int[])
				La méthode doit
					trouver le plus gros nombre du tableau
				La méthode retourne
					L'index du plus gros nombre
				On assume que :
					*rappel : À partir de l'exercice 23 vous devez validez vos paramètres
		
	Exercice32
		Faites la méthode avec la signature suivante
			void Exercice32(int[])
				La méthode doit :
				Inverser tous le tableau
				le premier élément devient le dernier
				le 2eme élément devient l'avant-dernier
				etc.
			On assume que :
					*rappel : À partir de l'exercice 23 vous devez validez vos paramètres
	Exercice 33
		Faites la méthode avec la signature suivante
			void Exercice33(int[])
				La méthode doit :
					prendre la première moitié du tableau et la substituer à la seconde
					exemple {1, 2, 3, 4, 5, 6}
					devient {4, 5, 6, 1, 2, 3}
					
	Exercice 34
		Faites la méthode Exercice34 avec la signature suivante
			int Exercice34(char[], char)
				La méthode doit :
					trouver le caractère passé en paramètre dans le tableau
				La méthode retourne : 
					L'index du caractère si trouvé, autrement -1
		
	Exercice 35
		Faites la méthode Exercice35 avec la signature suivante:
			int Exercice36(int[])
				La méthode doit :
					Trouver dans le tableau s'il y a un doublon (un nombre en double) 

					La méthode retourne :
						L'index du premier doublon
						si le tableau n'a pas de doublon on retourne -1
						Exemple {1,2,3,*4,5,*4,5,6,6}
						retourne 3 parce que 3 est l'index du premier 4 et, 4 et 4 sont les premiers doublons
	Exercice 36
		Faites la méthode Exercice36 avec la signature suivante :
			int[] Exercice36(int[])
				La méthode doit
					Trouver les index de tous les doublons et les mettre dans un tableau
					Note : dans un tableau de 2 de longueur :
							Combien au maximum de doublons peut-t'il y avoir ?
							Dans un tableau de 4, au maximum combien de doublon peut-il y avoir ?
					La méthode doit retourner :
						Un tableau contenant tous les index des premiers doublons.
	Exercice 37
		Faites la création d'une méthode Exercice36 avec la signature suivante
			int[] Exercice37(int[], int[])
				La méthode doit :
					Fusionner les 2 tableaux dans un nouveau tableau créé
				La méthode doit retourner :
					Un tableau qui contient les éléments des 2 tableaux passés en paramètre
					Exemple : Les tableaux en paramètre {1,2,3} et {4,5,6}
					Le tableau de sortie doit être de longueur 6
					et contenir { 1, 2, 3, 4, 5, 6 }
	Exercice 38
		Faites la création d'une méthode Exercice38 avec la signature suivante
			int[] Exercice38(int[])
				La méthode doit :
					Faire la somme des éléments pairs et impairs
				La méthode doit retourner :
					Un tableau d'une longueur de 2 dont le premier index contient la somme des nombres pairs et le second index la somme des éléments impairs.
	Exercice 39			
		Faites la création d'une méthode Exercice39 avec la signature suivante
			int[] Exercice39(int)
				La méthode doit
					Faire la création d'un tableau de longueur du paramètre
					Doit faire un palindrome numérique pour remplir le tableau
				La méthode retourne
					Un palindrome pour remplir un tableau de longueur du paramètre
					Exemple : Exercice(11)
					{0,1,2,3,4,5,4,3,2,1,0}
					Exemple 2 : Exercice(10)
					{0,1,2,3,4,4,3,2,1,0}
	Exercice 40
		Faites la création d'une méthode Exercice40 avec la signature suivante:
			void Exercice40(int[], int)
				La méthode doit :
					Faire le décalage du tableau vers la droite
				La méthode retourne 
					Rien
				Exemple : Exercice40(5)
				{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}
				le tableau devient
				{0,0,0,0,0,1,2,3,4,5,6,7,8,9,10}
	
	Exercice 41
		Faites la création d'une méthode Exercice41 avec la signature suivante:
			int[] Exercice41(int[],int)
				La méthode doit
					Faire la même chose que l'exercice 40, mais les informations qui "disparaissent du tableau" doivent être placées dans un tableau de sortie.
				La méthode retourne:
					Un tableau de longueur du 2eme paramètre qui contient les exclus du tableau
					Exemple avec le paramètre 5 et le tableau {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}
					Le tableau de travail devient {0,0,0,0,0,1,2,3,4,5,6,7,8,9,10} 
					Le tableau retournée est {11,12,13,14,15}
					
	Exercice 42
		Faites la création d'une méthode Exercice 42 avec la signature suivante:
			int[] Exercice42(int[],int)
				La méthode doit:
					Faire la rotation des nombres dans le tableau pour une longueur équivalente au paramètre
				La méthode doit retourner:
					Rien
				Exemple avec 5 et {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}
				Le tableau devient {11,12,13,14,15,1,2,3,4,5,6,7,8,9,10}
	
	Exercice 43
		Faites la création d'une méthode Exercice 43 avec la signature suivante
			int[] Exercice43(int[])
				La méthode doit :
					Créer un tableau de longueur égale à l'élément le plus grand du tableau
					Compter combien il y a de duplicata des nombres dans le tableau
					Exemple {1, 2, 1, 3, 2, 4} doit retourner {0,2,2,1,1}
					il n'y a aucun 0
					2x1
					2x1
					1x3
					1x4
	
	Exercice 44
		Faites la création d'une méthode exercice 44 avec la signature suivante
			int Exercice44(int[])
				La méthode doit :
					Trouver l'élément unique dans le tableau s'il y en a 1
				La méthode retourne
					-1 si aucun élément trouvé (ou si impossible à trouver)
					l'index de l'élément unique
					Exemple : {1,2,3,2,1} retourne 2 parce que 3 est unique et à l'index 2
					
		Faites la création d'une méthode exercice 45 avec la signature suivante:
			int[] Exercice45(int)
				La méthode doit :
					Faire un tableau de longueur du paramètre
					Le tableau doit démarrer avec 0 et 1
					Le 3eme élément est calculé en additionnant les nombres aux index 0 et 1
					Le 4eme élément est calculé en additionner 1 et 2
					Le 5eme élément est calculé en additionner 2 et 3
					etc.
				La méthode retourne
					Une suite de fibbonacci d'une longueur passé en paramètre.
					Exemple Exercice46(10) retourne
					{0,1,1,2,3,5,8,13,21,34}
					
		Faites la création d'une méthode Exercice46 avec la signature suivante
			int[] Exercice46(int[],int[])
				La méthode doit
					Fusionner les deux tableau dans un seul (exercice36)
					Le tableau fusionné doit être en ordre
				La méthode retourne
					Un tableau de longueur égale à la longueur des 2 tableaux d'origine
					Le tableau est trié lorsque sorti.
				On assume que :
					Les tableaux sont triés
				Exemple :
				{1,3,5}  {2,4,6}
				{0,0,0,0,0,0} //création du tableau de 6 (3+3)
				{1,0,0,0,0,0} // 1 du tableau 1 est inférieur à 2 du tableau 2
				{1,2,0,0,0,0} // 2 du tableau 2 est inférieur a 3 du tableau 1
				{1,2,3,0,0,0} // 3 du tableau 1 est inférieur a 4 du tableau 2
				{1,2,3,4,0,0} // 4 du tableau 2 est inférieur à 5 du tableau 1
				{1,2,3,4,5,0} // 5 du tableau 1 est infériruer à 6 du tableau 2
				{1,2,3,4,5,6} // 6 du tableau 2 est le seul élément restant.
				
				Exemple 2:
				Exemple :
				{1,3,5}  {2,4,6,7,8}
				{0,0,0,0,0,0,0,0} //création du tableau de 6 (3+3)
				{1,0,0,0,0,0,0,0} // 1 du tableau 1 est inférieur à 2 du tableau 2
				{1,2,0,0,0,0,0,0} // 2 du tableau 2 est inférieur a 3 du tableau 1
				{1,2,3,0,0,0,0,0} // 3 du tableau 1 est inférieur a 4 du tableau 2
				{1,2,3,4,0,0,0,0} // 4 du tableau 2 est inférieur à 5 du tableau 1
				{1,2,3,4,5,0,0,0} // 5 du tableau 1 est inférieur à 6 du tableau 2
				{1,2,3,4,5,6,7,8} // 6,7 et 8 du tableau 2 sont les seuls éléments restants.
					
				*indice vous allez avoir besoin de 3 curseurs/index/compteurs
				1 pour chaque tableau.
					où allez-vous écrire
					où vous êtes rendu dans le tableau 1
					où vous êtes rendu dans le tableau 2
					
	Exercice 47
		Faites la méthode Exercice 47 avec la signature suivante 
			void Exercice47(int[])
				La méthode doit :
					Trier avec l'algorithme du tri à bulle le tableau passé en paramètre
				La méthode retourne:
					Rien, le tableau est trié en place
					
	Exercice 48
		Faites la méthode Exercice 48 avec la signature suviante 
			void Exercice48(int[])
				La méthode doit :
					Trier avec l'algorithme du sélection le tableau passé en paramètre
				La méthode retourne:
					Rien, le tableau est trié en place
	
	Exercice 49
		Faites la méthode Exercice 49 avec la signature suviante 
			void Exercice49(int[])
				La méthode doit :
					Trier avec l'algorithme du tri par insersion le tableau passé en paramètre
				La méthode retourne:
					Rien, le tableau est trié en place
					
	Exercice 50
		Faites une classe Personne dans un fichier Personne.cs
			La classe contient
				Les membres suivants
					+nom:String
					+prenom:String
					+age:int
				Le constructeur contient les 3 éléments en paramètres
				Une méthode Vieillir() qui ajoute 1 année à la personne. 
	
	Exercice 51
		Faites une méthode Exercice 51 avec la signature suivante:
			Personne[] Exercice51(int, int, int, string[], string[])
			Parlons des paramètres
				- Le premier int est la nombre de personne qu'on veut générer
				- Le 2eme int est l'age minimum des personnes à générer
				- Le 3eme int est l'age maximum des personnes à générer
				- Le 1er tableau de string sont un tableau de prénom
				- Le 2eme tableau de string est un tableau de nom
			La méthode doit :
				Retourner un tableau de personne.
				Le nombre de personnes défini dans les paramètres
				L'age est aléatoire entre les 2 nombres passés en paramètre (inclusif)
				Le nom et le prénom sont choisis aléatoirement dans les 2 tableaux de string
	
	Exercice 52
		Faites une méthode Exercice52 avec la signature suivante
		bool Exercice52(Personne, Personne)
			La méthode doit
				Comparer les 2 personnes pour savoir si elles sont identiques.
				Deux personnes sont identiques si les attributs sont les mêmes.
				Pour les chaines de caractères, utilisez la méthode "Equals" de string.
			La méthode doit
				Retourner un booléen
				Si les 3 attributs membres des deux personnes sont identiques.
				
	Exercice 53
		Faites une méthode Exercice53 avec la signature suivante :
			int Exercice53(Personne, Personne)
			La méthode doit
				Comparer deux personnes et déterminer laquelle est la plus âgée.
			La méthode reçoit
				Un nombre positif si la première personne est plus vieille que la seconde
				Un nombre négatif si la première personne est plus jeune que la seconde
				Zéro si les 2 ages sont identiques
				Un nombre positif si la 2eme personne passée en paramètre est null
				* Un message d'erreur via la création d'un ArgumentNullException 
				* https://learn.microsoft.com/fr-fr/dotnet/standard/exceptions/how-to-explicitly-throw-exceptions
				* La ligne "throw" est celle recherchée